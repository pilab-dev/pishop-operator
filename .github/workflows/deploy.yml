name: Deploy Operator

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      version:
        description: 'Image version to deploy (leave empty for latest)'
        required: false
        default: 'latest'
        type: string

env:
  GHCR_REGISTRY: ghcr.io
  GHCR_NAMESPACE: pilab-dev
  GHCR_IMAGE_NAME: pishop-operator

jobs:
  deploy:
    runs-on: self-hosted
    environment: ${{ github.event.inputs.environment }}
   
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Deploy to Kubernetes
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI }}
        MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
        MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
        GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
        GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        GHCR_EMAIL: ${{ secrets.GHCR_EMAIL }}
      run: |
        echo "üöÄ Starting deployment to ${{ github.event.inputs.environment }}..."
        echo "üìã Deployment Information:"
        echo "  Environment: ${{ github.event.inputs.environment }}"
        echo "  Image: ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_NAMESPACE }}/${{ env.GHCR_IMAGE_NAME }}:${{ inputs.version }}"
        echo ""
        
        # Create namespace if it doesn't exist
        echo "üì¶ Creating namespace..."
        kubectl create namespace pishop-operator-system --dry-run=client -o yaml | kubectl apply -f -
        
        # Apply CRDs
        echo "üìã Applying CRDs..."
        kubectl apply -f config/crd/bases
        
        # Apply secrets from templates
        echo "üîê Applying secrets..."
        
        # Create MongoDB credentials secret
        envsubst < config/manager/mongodb-credentials-secret-template.yaml | kubectl apply -f -
        
        # Create GitHub credentials secret
        envsubst < config/manager/github-credentials-secret-template.yaml | kubectl apply -f -
        
        # Update deployment manifest with the correct image
        echo "üîÑ Updating deployment manifest..."
        sed -i.bak "s|image: .*|image: ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_NAMESPACE }}/${{ env.GHCR_IMAGE_NAME }}:${{ inputs.version }}|g" config/manager/manager.yaml
        rm -f config/manager/*.bak
        
        # Deploy the operator
        echo "üöÄ Deploying operator..."
        kubectl apply -f config/manager/manager.yaml
        
        # Force rollout by restarting the deployment
        echo "üîÑ Forcing deployment rollout..."
        kubectl rollout restart deployment/pishop-operator -n pishop-operator-system
        
        # Wait for rollout
        echo "‚è≥ Waiting for rollout to complete..."
        kubectl rollout status deployment/pishop-operator -n pishop-operator-system --timeout=300s
        
        echo "‚úÖ Deployment completed successfully!"
    
    - name: Verify deployment
      run: |
        echo "üîç Verifying deployment..."
        
        # Check pod status
        echo "üì¶ Pod status:"
        kubectl get pods -n pishop-operator-system -l control-plane=controller-manager
        
        # Check deployment status
        echo "üöÄ Deployment status:"
        kubectl get deployment pishop-operator -n pishop-operator-system
        
        # Check operator logs for errors
        echo "üìù Recent operator logs:"
        kubectl logs deployment/pishop-operator -n pishop-operator-system --tail=20 || true
        
        # Verify CRDs are installed
        echo "üìã CRD status:"
        kubectl get crd | grep shop.pilab.hu || echo "No CRDs found"
    
    - name: Deployment summary
      run: |
        echo "üéâ Deployment Summary"
        echo "==================="
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Version: ${{ inputs.version }}"
        echo "Image: ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_NAMESPACE }}/${{ env.GHCR_IMAGE_NAME }}:${{ inputs.version }}"
        echo ""
        echo "üìä Status:"
        kubectl get pods -n pishop-operator-system -l control-plane=controller-manager
        echo ""
        echo "üìù View logs: kubectl logs -f deployment/pishop-operator -n pishop-operator-system"
