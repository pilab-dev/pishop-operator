# Example TLS Secret for custom domain
# This secret contains the TLS certificate and private key for HTTPS
#
# To create this secret, you can use:
# kubectl create secret tls magicshop-tls --cert=path/to/cert.crt --key=path/to/private.key
#
# Or create it manually:
apiVersion: v1
kind: Secret
metadata:
  name: magicshop-tls
  namespace: default
type: kubernetes.io/tls
data:
  # Base64 encoded certificate (replace with actual certificate)
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t...
  # Base64 encoded private key (replace with actual private key)
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t...

---
# Example TLS Secret for another domain
apiVersion: v1
kind: Secret
metadata:
  name: gyurushop-tls
  namespace: default
type: kubernetes.io/tls
data:
  # Base64 encoded certificate (replace with actual certificate)
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t...
  # Base64 encoded private key (replace with actual private key)
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t...

---
# Note: For production use, consider using cert-manager for automatic certificate management:
# https://cert-manager.io/docs/
#
# Example cert-manager Certificate resource:
# apiVersion: cert-manager.io/v1
# kind: Certificate
# metadata:
#   name: magicshop-tls
#   namespace: default
# spec:
#   secretName: magicshop-tls
#   issuerRef:
#     name: letsencrypt-prod
#     kind: ClusterIssuer
#   dnsNames:
#   - magicshop.hu
