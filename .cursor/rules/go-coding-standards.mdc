---
globs: *.go
---
# Go Coding Standards for PiShop Operator

## General Guidelines

- Use standard Go formatting with `go fmt`
- Follow Go naming conventions (camelCase for unexported, PascalCase for exported)
- Use meaningful variable and function names
- Add comments for exported functions and types
- Use context.Context for all operations that can be cancelled

## Controller Patterns

- Use structured logging with `ctrl.LoggerFrom(ctx)`
- Always handle errors properly and return them
- Use `ctrl.Result{RequeueAfter: time.Second * 30}` for retry scenarios
- Update status fields atomically using `r.Status().Update(ctx, prStack)`
- Use Kubernetes events for user notifications: `r.Recorder.Event()`

## Resource Management

- Always check for resource existence before creating
- Use finalizers for cleanup operations: `shop.pilab.hu/finalizer`
- Handle deletion with `!prStack.DeletionTimestamp.IsZero()`
- Use owner references for automatic garbage collection

## Error Handling

```go
if err := r.Create(ctx, resource); err != nil {
    if errors.IsAlreadyExists(err) {
        // Handle existing resource
        return ctrl.Result{}, nil
    }
    log.Error(err, "Failed to create resource")
    return ctrl.Result{RequeueAfter: time.Second * 30}, err
}
```

## Status Updates

- Update status fields separately from spec updates
- Use `metav1.Now()` for timestamps
- Include meaningful messages in status for debugging
- Update phase transitions atomically

## Testing

- Write unit tests for all controller logic
- Use `make test` to run tests with coverage
- Mock external dependencies (MongoDB, NATS, Redis)
- Test error scenarios and edge cases